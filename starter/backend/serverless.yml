org: bqlorg
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  environment:
    TODOS_TABLE: "Todos"
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    S3_BUCKET: 'my-todo-app-bucket'

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    tracing: Active
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTelemetryRecords"
          - "xray:PutTraceSegments"
        Resource: "*"

  # Get Todos for a user
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    environment:
      TODOS_TABLE: ${self:provider.environment.TODOS_TABLE}
    tracing: Active
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:GetItem"
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTelemetryRecords"
          - "xray:PutTraceSegments"
        Resource: "*"

  # Create a new Todo
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
    environment:
      TODOS_TABLE: ${self:provider.environment.TODOS_TABLE}
    tracing: Active
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTelemetryRecords"
          - "xray:PutTraceSegments"
        Resource: "*"

  # Update an existing Todo
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    environment:
      TODOS_TABLE: ${self:provider.environment.TODOS_TABLE}
    tracing: Active
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTelemetryRecords"
          - "xray:PutTraceSegments"
        Resource: "*"

  # Delete a Todo
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    environment:
      TODOS_TABLE: ${self:provider.environment.TODOS_TABLE}
    tracing: Active
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTelemetryRecords"
          - "xray:PutTraceSegments"
        Resource: "*"

  # Generate Upload URL for Todo attachment
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    environment:
      TODOS_TABLE: ${self:provider.environment.TODOS_TABLE}
    tracing: Active
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:GetObject"
        Resource:
          - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - "xray:PutTelemetryRecords"
          - "xray:PutTraceSegments"
        Resource: "*"

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: "userId"
            AttributeType: "S"
          - AttributeName: "todoId"
            AttributeType: "S"
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: "userId"
            KeyType: "HASH"
          - AttributeName: "todoId"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    # S3 Bucket for storing attachments
    TodoAttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"  # Allow all origins
              AllowedMethods:
                - GET
                - POST
                - PUT
              AllowedHeaders:
                - "*"
